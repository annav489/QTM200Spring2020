filter(year == 1982, sex == "M", m == sum(n))
babynames %>%
group_by(year) %>%
filter(year == 1982, sex == "M", n == sum(n))
babynames %>%
group_by(year) %>%
filter(year == 1982, sex == "M")
babynames %>%
group_by(year) %>%
filter(year == 1982, sex == "M") %>%
summarize(n_sum == sum(n))
babynames %>%
group_by(year) %>%
filter(year == 1982, sex == "M") %>%
summarize(sum == sum(n))
babynames %>%
group_by(year) %>%
filter(year == 1982, sex == "M") %>%
summarize(n == sum(n))
babynames %>%
filter(year == 1982, sex == "M")
babynames %>%
filter(year == 1982, sex == "M") %>%
sum(n)
babynames %>%
filter(year == 1982, sex == "M") %>%
sum(n, na.rm = TRUE)
babynames %>%
filter(year == 1982, sex == "M")
babynames %>%
filter(year == 1982, sex == "M", n == sum(n))
babynames %>%
filter(year == 1982, sex == "M")
sum(babynames$n)
babynames %>%
select(year == 1982, sex == "M")
sum(babynames$n)
babynames %>%
filter(year == 1982, sex == "M")
babynames %>%
filter(year == 1982, sex == "M") %>%
sum(n)
babynames %>%
filter(year == 1982, sex == "M") %>%
count(n)
babynames %>%
filter(year == 1982, sex == "M") %>%
count(n)
babynames %>%
filter(year == 1982, sex == "M")
babynames %>%
filter(year == 1982, sex == "M") %>%
tally(n)
babynames %>%
group_by(sex)
babynames %>%
group_by(sex, year)
head(babynames)
babynames %>%
group_by(sex, year) %>%
summarize(names = tally(name))
babynames %>%
group_by(sex, year) %>%
summarize(name = tally(name))
head(babynames)
babynames %>%
filter(year == 1982, sex == "M") %>%
mutate(total = sum(n))
head(babynames)
select(babynames, year,sex,n)
select(babynames, year,sex,n) %>%
sum(n)
select(babynames, year,sex,n) %>%
group_by(year, sex) %>%
summarize(number_per_year = sum(n))
babynames %>%
filter(year = 2017) %>%
filter(prop == max(prop, na.rm = TRUE))
babynames %>%
filter(year == 2017) %>%
filter(prop == max(prop, na.rm = TRUE))
babynames %>%
filter(year == 2017, sex = "M") %>%
filter(prop == max(prop, na.rm = TRUE))
babynames %>%
filter(year == 2017, sex == "M") %>%
filter(prop == max(prop, na.rm = TRUE))
babynames %>%
filter(year == 2017, sex == "M", sex == "F") %>%
filter(prop == max(prop, na.rm = TRUE))
babynames %>%
group_by(sex) %>%
filter(year == 2017, sex == "M") %>%
filter(prop == max(prop, na.rm = TRUE))
babynames %>%
filter(year == 2017, sex == "M")
babynames %>%
filter(year == 2017, sex == "M") %>%
arrange(desc(prop))
babynames %>%
filter(year == 2017) %>%
arrange(desc(prop))
top_names_2017 = babynames %>%
filter(year == 2017) %>%
arrange(desc(prop))
top_names_2017
top_names_2017 = c("Emma", "Olivia", "Liam", "Noah")
top_names_2017
head(babynames)
babynames %>%
filter(name == top_names_2017)
head(babynames)
babynames %>%
filter(name == top_names_2017) %>%
qplot(year, prop)
babynames %>%
group_by(name) %>%
qplot(year, prop)
babynames %>%
group_by(name) %>%
qplot(year, prop, babynames)
babynames %>%
group_by(name)
babynames %>%
filter(name == top_names_2017)
qplot(year, prop, babynames)
babynames %>%
filter(name == top_names_2017) %>%
qplot(year, prop, babynames)
babynames %>%
filter(name == top_names_2017) %>%
qplot(year, n, babynames)
babynames$prop
babynames %>%
filter(name == top_names_2017) %>%
qplot(year, prop, babynames, color = name)
babynames %>%
filter(name == top_names_2017) %>%
qplot(x = year, y = prop, babynames, color = name)
names_filt <- filter(babynames, name %in% top_names_2017)
names_filt
qplot(x = year, y = prop, names_filt, geom = 'line', color = name)
library(gapminder)
gap_filt <- filter(gapminder,
country %in% c("China", "India", "Sierra Leone"))
qplot(x = year,
y = gdpPercap,
data = gap_filt,
geom = 'line',
color = country)
gap_filt
names_filt
qplot(x = year, y = prop, names_filt, geom = 'line', color = name)
ggplot(data = names_filt, mapping = aes(x = year, y = prop))
##Free up scales in ggplot
ggplot(data = gapminder,
mapping = aes(x = gdpPercap, y = lifeExp)) +
geom_point(size = 0.5) +
facet_grid(continent~year, scales = "free")
ggplot(data = names_filt, mapping = aes(x = year, y = prop) + geom_line(size = 0.5))
ggplot() + geom_line(data = names_filt, mapping = aes(x = year, y = prop)))
ggplot() + geom_line(data = names_filt, mapping = aes(x = year, y = prop))
names_filt <- filter(babynames, name %in% top_names_2017)
names_filt <- filter(babynames, name %in% top_names_2017)
ggplot() + geom_line(data = names_filt, mapping = aes(x = year, y = prop))
library(babynames)
library(tidyverse)
library(gapminder)
head(babynames)
babynames %>%
group_by(sex) %>%
filter(prop == max(prop, na.rm = TRUE))
## Mary
babynames %>%
filter(year == 1982, sex == "M") %>%
mutate(total = sum(n))
##1,814,611
select(babynames, year, sex, n) %>%
group_by(year, sex) %>%
summarize(number_per_year = sum(n))
babynames %>%
filter(year == 2017) %>%
arrange(desc(prop))
top_names_2017 = c("Emma", "Olivia", "Liam", "Noah")
names_filt <- filter(babynames, name %in% top_names_2017)
ggplot() + geom_line(data = names_filt, mapping = aes(x = year, y = prop))
ggplot() + geom_line(data = names_filt, mapping = aes(x = year, y = prop), color = name)
ggplot() + geom_line(data = names_filt, mapping = aes(x = year, y = prop), color = "name")
ggplot() + geom_line(data = names_filt, mapping = aes(x = year, y = prop, color = name))
names_filt_high <- filter(names_filt, prop > 0.0002)
ggplot() + geom_line(data = names_filt_high, mapping = aes(x = year, y = prop, color = name))
library(gapminder)
##ggplot vs. qplot
qplot(x = gdpPercap, y = lifeExp, data = gapminder, facets = continent~year)
library(tidyverse)
##ggplot vs. qplot
qplot(x = gdpPercap, y = lifeExp, data = gapminder, facets = continent~year)
library(babynames)
library(tidyverse)
library(gapminder)
head(babynames)
babynames %>%
group_by(sex) %>%
filter(prop == max(prop, na.rm = TRUE))
babynames %>%
filter(year == 1982, sex == "M") %>%
mutate(total = sum(n))
library(tidyverse)
gss_fake <- gss_cat %>% mutate(empl = sample(c("Yes", "No"),
as.double(count(gss_cat)),
replace = T
)
)
state.name
state.abb
state.keys <- tibble(state = state.name, ab = state.abb)
state.keys
midwest
ggplot(midwest, aes(PID, percbelowpoverty)) +
geom_point(group = state)
midwest
ggplot(midwest, aes(PID, percbelowpoverty)) +
geom_point(aes(color = state, shape = state))
##Quiz 3 Question
ggplot(midwest, aes(PID, percbelowpoverty)) +
geom_point(aes(group = state, color = state, shape = state))
library(nycflights13)
filter(flights, month == 1 & day == 1)
filter(flights, month == 1 & month == 2)
filter(flights, month == 1 | month == 2)
library(tidyverse)
newgss <- read.csv("newgss.csv")
txhousing_filter <- filter(txhousing, year == 2014 & city == c('Austin', 'Collin County', 'Dallas', 'Denton County', 'Fort Bend', 'Fort Worth', 'Houston', 'Montgomery County', 'San Antonio'))
txhousing_filter
txhousing
txhousing
txhousing_filter <- filter(txhousing, year == 2014 & city == c('Austin', 'Collin County', 'Dallas', 'Denton County', 'Fort Bend', 'Fort Worth', 'Houston', 'Montgomery County', 'San Antonio'))
txhousing_filter <- filter(txhousing, year == 2014 & city == c('Austin', 'Collin County', 'Dallas', 'Denton County', 'Fort Bend', 'Fort Worth', 'Houston', 'Montgomery County', 'San Antonio'))
head(txhousing_filter)
ggplot(txhousing_filter, aes(month, median)) +
geom_point(aes(color = city), size = 0.5) +
geom_line(aes(color = city), alpha = 0.5)
txhousing_filter <- filter(txhousing, year == 2014 & city == c('Austin', 'Collin County', 'Dallas', 'Denton County', 'Fort Bend', 'Fort Worth', 'Houston', 'Montgomery County', 'San Antonio'))
ggplot(txhousing_filter, aes(month, median)) +
geom_point(aes(color = city), size = 0.5) +
geom_line(aes(color = city), alpha = 0.5)
ggplot(txhousing_filter, aes(month, median)) +
geom_point(aes(color = city), size = 0.5)
txhousing_filter <- filter(txhousing, year == 2014)
txhousing_filter <- filter(txhousing, year == 2014)
txhousing_filter2 <- filter(txhousing_filter, city == c('Austin', 'Collin County', 'Dallas', 'Denton County', 'Fort Bend', 'Fort Worth', 'Houston', 'Montgomery County', 'San Antonio'))
txhousing_filter2 <- filter(txhousing_filter, city %in% c('Austin', 'Collin County', 'Dallas', 'Denton County', 'Fort Bend', 'Fort Worth', 'Houston', 'Montgomery County', 'San Antonio'))
ggplot(txhousing_filter2, aes(month, median)) +
geom_point(aes(color = city), size = 0.5) +
geom_line(aes(color = city), alpha = 0.5)
txhousing_filter2 <- filter(txhousing_filter,year == 2014 & city %in% c('Austin', 'Collin County', 'Dallas', 'Denton County', 'Fort Bend', 'Fort Worth', 'Houston', 'Montgomery County', 'San Antonio'))
ggplot(txhousing_filter2, aes(month, median)) +
geom_point(aes(color = city), size = 0.5) +
geom_line(aes(color = city), alpha = 0.5)
txhousing_filter <- filter(txhousing_filter,year == 2014 & city %in% c('Austin', 'Collin County', 'Dallas', 'Denton County', 'Fort Bend', 'Fort Worth', 'Houston', 'Montgomery County', 'San Antonio'))
ggplot(txhousing_filter, aes(month, median)) +
geom_point(aes(color = city), size = 0.5) +
geom_line(aes(color = city), alpha = 0.5)
txhousing_filter <- filter(txhousing, year == 2014 & city %in% c('Austin', 'Collin County', 'Dallas', 'Denton County', 'Fort Bend', 'Fort Worth', 'Houston', 'Montgomery County', 'San Antonio'))
ggplot(txhousing_filter, aes(month, median)) +
geom_point(aes(color = city), size = 0.5) +
geom_line(aes(color = city), alpha = 0.5)
install.packages(fastqcr)
install.packages("fastqcr")
library(fastqcr)
fastqc_install(dest.dir = "~/bin")
fastqc(fq.dir = "~/bin/sratoolkit.2.9.6-1-mac64/bin", qc.dir = NULL, threads = 4, fastqc.path = "~/bin/fastQC")
fastqc(fq.dir = "~/bin/sratoolkit.2.9.6-1-mac64/bin", qc.dir = NULL, threads = 4, fastqc.path = "~/bin/fastQC/fastqc")
fastqc(fq.dir = "~/bin/sratoolkit.2.9.6-1-mac64/bin", qc.dir = NULL, threads = 4, fastqc.path = "~/bin/fastQC/fastqc")
fastqc(fq.dir = "~/bin/sratoolkit.2.9.6-1-mac64/bin", qc.dir = NULL, threads = 4, fastqc.path = "~/bin/fastQC/fastqc")
fastqc(fq.dir = "~/bin/sratoolkit.2.9.6-1-mac64/bin", qc.dir = NULL, threads = 4, fastqc.path = "~/bin/fastQC/fastqc")
getwd()
# No          type      lifespan         thorax          sleep
# Min.   : 1   Min.   :1   Min.   :16.00   Min.   :0.640   Min.   : 1.00
# 1st Qu.: 7   1st Qu.:2   1st Qu.:46.00   1st Qu.:0.760   1st Qu.:13.00
# Median :13   Median :3   Median :58.00   Median :0.840   Median :20.00
# Mean   :13   Mean   :3   Mean   :57.44   Mean   :0.821   Mean   :23.46
# 3rd Qu.:19   3rd Qu.:4   3rd Qu.:70.00   3rd Qu.:0.880   3rd Qu.:29.00
# Max.   :25   Max.   :5   Max.   :97.00   Max.   :0.940   Max.   :83.00
hist(fruitfly$lifespan)
##Question 1
#1a
discrimination <- matrix(c(14, 6, 7, 7, 7, 1),ncol=3,byrow=TRUE)
colnames(discrimination) <- c("Not_Stopped","Bribe_Requested","Stopped_Given_Warning")
rownames(discrimination) <- c("Upper_Class","Lower_Class")
discrimination <- as.table(discrimination)
totals <- sum(discrimination)
#Sum Not Stopped
not_stopped <- sum(14 + 7)
#Sum Bribe Requested
bribe_requested <- sum(6 + 7)
#Sum Warning
warning <- (7 + 1)
#Sum Upper Class
upper <- sum(14 + 6 + 7)
#Sum Lower Class
lower <- sum(7 + 7 + 1)
#Expected Not Stopped, Upper Class
fe1 <- (upper/totals)*not_stopped
#Expected Bribe requested, Upper Class
fe2 <- (upper/totals)*bribe_requested
#Expected Warning Given, Upper Class
fe3 <- (upper/totals)*warning
#Expected Not Stopped, Lower Class
fe4 <- (lower/totals)*not_stopped
#Expected Bribe requested, Lower Class
fe5 <- (lower/totals)*bribe_requested
#Expected Warning Given, Lower Class
fe6 <- (lower/totals)*warning
##Observed-Expected squared divided by expected
#Not Stopped, Upper Class
chisquare1 <- (14-fe1)^2/fe1
#Expected Bribe requested, Upper Class
chisquare2 <- (6-fe2)^2/fe2
#Expected Warning Given, Upper Class
chisquare3 <- (7-fe3)^2/fe3
#Expected Not Stopped, Lower Class
chisquare4 <- (7-fe4)^2/fe4
#Expected Bribe requested, Lower Class
chisquare5 <- (7-fe5)^2/fe5
#Expected Warning Given, Lower Class
chisquare6 <- (1-fe6)^2/fe6
#Test Statistic
chi_square_stat <- sum(chisquare1,chisquare2,chisquare3,chisquare4,chisquare5,chisquare6)
#1b
# df = (rows-1))columns-1)
df_pchisq <- (2-1)*(3-1)
pchisq(chi_square_stat, df = df_pchisq, lower.tail = FALSE)
#1c
f0 - fe/ sqrt(fe(1-rowtotal/total)*(1-columntotal/total))
z1 <- (14-fe1)/sqrt(fe1*(1-(upper/totals)*(1-(not_stopped/totals))))
z2 <- (6-fe2)/sqrt(fe2*(1-(upper/totals)*(1-(bribe_requested/totals))))
z3 <- (7-fe3)/sqrt(fe3*(1-(upper/totals)*(1-(warning/totals))))
z4 <- (7-fe4)/sqrt(fe4*(1-(lower/totals)*(1-(not_stopped/totals))))
z5 <- (7-fe5)/sqrt(fe5*(1-(lower/totals)*(1-(bribe_requested/totals))))
z6 <- (1-fe6)/sqrt(fe6*(1-(lower/totals)*(1-(warning/totals))))
matrix(c(z1, z2, z3, z4, z5, z6), ncol = 3, byrow = TRUE)
##Question 2
download.file("https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv", "women.csv")
women <- read.csv("women.csv")
head(women)
#Standardize variation
mean_water_y <- mean(women$water)
mean_reserved_x <- mean(women$reserved)
sum_y <- sum(women$water)
sum_x <- sum(women$reserved)
b_hat <- sum((women$water - mean(women$water)) * (women$reserved - mean(women$reserved))) /
sum((women$reserved - (mean_reserved_x))^2)
a_hat <- mean_water_y - (b_hat*mean_reserved_x)
#Check
lm(women$water ~ women$reserved) #14.738
##Question 3
fruitfly <- read.csv("fruitfly.csv")
#3.1
summary(fruitfly)
# No          type      lifespan         thorax          sleep
# Min.   : 1   Min.   :1   Min.   :16.00   Min.   :0.640   Min.   : 1.00
# 1st Qu.: 7   1st Qu.:2   1st Qu.:46.00   1st Qu.:0.760   1st Qu.:13.00
# Median :13   Median :3   Median :58.00   Median :0.840   Median :20.00
# Mean   :13   Mean   :3   Mean   :57.44   Mean   :0.821   Mean   :23.46
# 3rd Qu.:19   3rd Qu.:4   3rd Qu.:70.00   3rd Qu.:0.880   3rd Qu.:29.00
# Max.   :25   Max.   :5   Max.   :97.00   Max.   :0.940   Max.   :83.00
hist(fruitfly$lifespan)
#3.2
library(tidyverse)
qplot(x = thorax, y = lifespan, data = fruitfly)
cor(fruitfly$thorax, fruitfly$lifespan, method="pearson")
#Check if null p = 0
cor.test(fruitfly$thorax, fruitfly$lifespan)
##Question 1
#1a
discrimination <- matrix(c(14, 6, 7, 7, 7, 1),ncol=3,byrow=TRUE)
colnames(discrimination) <- c("Not_Stopped","Bribe_Requested","Stopped_Given_Warning")
rownames(discrimination) <- c("Upper_Class","Lower_Class")
discrimination <- as.table(discrimination)
totals <- sum(discrimination)
#Sum Not Stopped
not_stopped <- sum(14 + 7)
#Sum Bribe Requested
bribe_requested <- sum(6 + 7)
#Sum Warning
warning <- (7 + 1)
#Sum Upper Class
upper <- sum(14 + 6 + 7)
#Sum Lower Class
lower <- sum(7 + 7 + 1)
#Expected Not Stopped, Upper Class
fe1 <- (upper/totals)*not_stopped
#Expected Bribe requested, Upper Class
fe2 <- (upper/totals)*bribe_requested
#Expected Warning Given, Upper Class
fe3 <- (upper/totals)*warning
#Expected Not Stopped, Lower Class
fe4 <- (lower/totals)*not_stopped
#Expected Bribe requested, Lower Class
fe5 <- (lower/totals)*bribe_requested
#Expected Warning Given, Lower Class
fe6 <- (lower/totals)*warning
##Observed-Expected squared divided by expected
#Not Stopped, Upper Class
chisquare1 <- (14-fe1)^2/fe1
#Expected Bribe requested, Upper Class
chisquare2 <- (6-fe2)^2/fe2
#Expected Warning Given, Upper Class
chisquare3 <- (7-fe3)^2/fe3
#Expected Not Stopped, Lower Class
chisquare4 <- (7-fe4)^2/fe4
#Expected Bribe requested, Lower Class
chisquare5 <- (7-fe5)^2/fe5
#Expected Warning Given, Lower Class
chisquare6 <- (1-fe6)^2/fe6
#Test Statistic
chi_square_stat <- sum(chisquare1,chisquare2,chisquare3,chisquare4,chisquare5,chisquare6)
#1b
# df = (rows-1))columns-1)
df_pchisq <- (2-1)*(3-1)
pchisq(chi_square_stat, df = df_pchisq, lower.tail = FALSE)
#1c
f0 - fe/ sqrt(fe(1-rowtotal/total)*(1-columntotal/total))
z1 <- (14-fe1)/sqrt(fe1*(1-(upper/totals)*(1-(not_stopped/totals))))
z2 <- (6-fe2)/sqrt(fe2*(1-(upper/totals)*(1-(bribe_requested/totals))))
z3 <- (7-fe3)/sqrt(fe3*(1-(upper/totals)*(1-(warning/totals))))
z4 <- (7-fe4)/sqrt(fe4*(1-(lower/totals)*(1-(not_stopped/totals))))
z5 <- (7-fe5)/sqrt(fe5*(1-(lower/totals)*(1-(bribe_requested/totals))))
#1c
f0 <- fe/ sqrt(fe(1-rowtotal/total)*(1-columntotal/total))
#1c
z1 <- (14-fe1)/sqrt(fe1*(1-(upper/totals)*(1-(not_stopped/totals))))
z2 <- (6-fe2)/sqrt(fe2*(1-(upper/totals)*(1-(bribe_requested/totals))))
z3 <- (7-fe3)/sqrt(fe3*(1-(upper/totals)*(1-(warning/totals))))
z4 <- (7-fe4)/sqrt(fe4*(1-(lower/totals)*(1-(not_stopped/totals))))
z5 <- (7-fe5)/sqrt(fe5*(1-(lower/totals)*(1-(bribe_requested/totals))))
z6 <- (1-fe6)/sqrt(fe6*(1-(lower/totals)*(1-(warning/totals))))
matrix(c(z1, z2, z3, z4, z5, z6), ncol = 3, byrow = TRUE)
##Question 2
download.file("https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv", "women.csv")
women <- read.csv("women.csv")
head(women)
#Standardize variation
mean_water_y <- mean(women$water)
mean_reserved_x <- mean(women$reserved)
sum_y <- sum(women$water)
sum_x <- sum(women$reserved)
b_hat <- sum((women$water - mean(women$water)) * (women$reserved - mean(women$reserved))) /
sum((women$reserved - (mean_reserved_x))^2)
a_hat <- mean_water_y - (b_hat*mean_reserved_x)
#Check
lm(women$water ~ women$reserved) #14.738
##Question 3
fruitfly <- read.csv("fruitfly.csv")
setwd("~/Documents/GitHub/QTM200Spring2020/problem_sets/PS2")
##Question 3
fruitfly <- read.csv("fruitfly.csv")
#3.1
summary(fruitfly)
# No          type      lifespan         thorax          sleep
# Min.   : 1   Min.   :1   Min.   :16.00   Min.   :0.640   Min.   : 1.00
# 1st Qu.: 7   1st Qu.:2   1st Qu.:46.00   1st Qu.:0.760   1st Qu.:13.00
# Median :13   Median :3   Median :58.00   Median :0.840   Median :20.00
# Mean   :13   Mean   :3   Mean   :57.44   Mean   :0.821   Mean   :23.46
# 3rd Qu.:19   3rd Qu.:4   3rd Qu.:70.00   3rd Qu.:0.880   3rd Qu.:29.00
# Max.   :25   Max.   :5   Max.   :97.00   Max.   :0.940   Max.   :83.00
hist(fruitfly$lifespan)
qplot(x = thorax, y = lifespan, data = fruitfly)
cor(fruitfly$thorax, fruitfly$lifespan, method="pearson")
#Check if null p = 0
cor.test(fruitfly$thorax, fruitfly$lifespan)
#3.4
cor.test(fruitfly$lifespan,fruitfly$thorax) #P-value = 1.497e-15
ggplot(new_df, aes(x=thorax, y=lifespan))+
geom_point()+
geom_smooth(method=lm, se=TRUE)+
geom_line(aes(y=lwr), color = "red", linetype = "dashed")+
geom_line(aes(y=upr), color = "red", linetype = "dashed")
#3.7
fitted_lifespan <- predict(lm(fruitfly$lifespan~fruitfly$thorax), newdata=new_fruitfly , se.fit = TRUE)
reg <- lm(fruitfly$lifespan~fruitfly$thorax)
new_df <- cbind(fruitfly, pred_interval, conf_interval)
#3.6.1
new_fruitfly <- fruitfly
new_fruitfly$thorax <- 0.8
#Condifence intervals around expected values of lifespan
pred_interval <- predict(lm(fruitfly$lifespan~fruitfly$thorax), newdata=new_fruitfly , interval = "prediction", level = 0.95)
conf_interval <- predict(lm(fruitfly$lifespan~fruitfly$thorax), newdata=new_fruitfly , interval = "confidence", level = 0.95)
#3.6.2
#Expected Values of Lifespan:
predict(lm(fruitfly$lifespan~fruitfly$thorax), newdata=new_fruitfly , se.fit = TRUE)
#3.7
fitted_lifespan <- predict(lm(fruitfly$lifespan~fruitfly$thorax), newdata=new_fruitfly , se.fit = TRUE)
reg <- lm(fruitfly$lifespan~fruitfly$thorax)
new_df <- cbind(fruitfly, pred_interval, conf_interval)
names(new_df)[9] <- "fit_conf"
names(new_df)[10] <- "lwr_conf"
names(new_df)[11] <- "upr_conf"
ggplot(new_df, aes(x=thorax, y=lifespan))+
geom_point()+
geom_smooth(method=lm, se=TRUE)+
geom_line(aes(y=lwr), color = "red", linetype = "dashed")+
geom_line(aes(y=upr), color = "red", linetype = "dashed")
#3.5
##p-value = 1.497e-15 (see 3.4)
t.test(lm(fruitfly$lifespan~fruitfly$thorax), level = 0.90)
#Formula based on t values:
confint(lm(fruitfly$lifespan~fruitfly$thorax), level = 0.90)
#3.6.2
#Expected Values of Lifespan:
predict(lm(fruitfly$lifespan~fruitfly$thorax), newdata=new_fruitfly , se.fit = TRUE)
