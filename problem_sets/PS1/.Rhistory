axis(1, at = 1:4, labels = c("Always In", "Joined", "Left", "Never In"), cex.axis = 0.6)
##Dichotomized beds vs. grossrev
plot(aha$beds_dichotomized, aha$grossrev_2, xaxt = "n", main ="Number of Beds in Hospitals \n (Dichotomized) vs. Gross Revenue ", xlab = "Number of Beds", ylab = " Gross Revenue")
axis(1, at = 1:2, labels = c("less than 204", "204 or more"), cex.axis = 0.7)
##Dichotomized beds vs. GROUP
barplot(table(aha$beds_dichotomized, aha$GROUP), beside = TRUE, xaxt = "n", main ="Number of Beds in Hospitals \n (Dichotomized) vs. Middleman Supplier \n Status ", xlab = "Middle Man ( Yes or no)", ylab = "Frequency")
axis(1, at = c(2,5), labels = c("no", "yes"))
legend("topleft", legend=c("less than 204", "204 or more"), col=c("black", "grey"), lty=1:2, cex=0.8)
##Dichotomized beds vs. netstat
barplot(table(aha$beds_dichotomized, aha$netstat), beside = TRUE, xaxt = "n", main ="Number of Beds in Hospitals \n (Dichotomized) vs. Network Status", xlab = "Network Status", ylab = "Frequency")
axis(1, at = c(2, 5, 8, 11), labels = c("Always In", "Joined", "Left", "Never In"), cex.axis = 0.6)
legend("topleft", legend=c("less than 204", "204 or more"), col=c("black", "grey"), lty=1:2, cex=0.8)
snps <- c("Rnf123", "Amigo3", "GMPPB", "IP6K1", "CDHR4", "FAM212A", "INKA1", "UBA7", "MIR5193", "TRAIP", "CAMKV", "MST1R", "MON1A", "RBM6", "RBM5", "RBM5-AS1", "SEMA3F-AS1", "SEMA3F", "GNAT1", "SLC38A3", "GNAI2", "MIR5787", "SEMA3B-AS1", "SEMA3B", "MIR6872", "LSMEM2", "IFRD2", "HYAL3", "NAA80", "HYAL1", "HYAL2", "TUSC2", "RASSF1", "RASSF1-AS1", "ZMYND10", "NPRL2", "CYB561D2", "TMEM115", "CACNA2D2", "C3orf18", "HEMK1", "CISH", "MAPKAPK3", "MIR4787", "DOCK3", "MANF", "RBM15B", "DCAF1", "RAD54L2", "TEX264", "GRM2", "IQCF6", "IQCF4", "ICQF3", "IQCF2", "IQCF5-AS1", "IQCF5", "IQCF51", "RRP9", "PARP3", "GPR62", "PCBP4", "ABHD14B", "ABHD14A", "ABHD14A-ACY1", "ACY1", "RPL29", "DUSP7", "LINC00696", "POC1A", "ALAS1", "TLR9", "TWF2", "LOC101929054", "PPM1M", "WDR82", "MIRLET7G", "GLYCTK", "GLYCTK-AS1", "MIR135A1", "DNAH1", "BAP1", "PHF7", "SEMA3G", "TNNC1", "NISCH", "STAB1", "NT5DC2", "SMIM4", "PBRM1", "GNL3", "SNORD136", "SNORD19", "SNORD19B", "SNORD19C", "SNORD69", "GLT8D1", "SPCS1", "NEK4", "ITIH1", "ITIH3", "ITIH4", "ITIH4-AS1", "MUSTN1", "TMEM110-MUSTN1", "STIMATE", "MIR8064", "SFMBT1", "LOC401068", "RFT1", "PRKCD", "TKT", "DCP1A", "SNORD38C", "CACNA1D", "CHDH", "IL17RB", "ACTR8", "SELENOK", "CACNA2D3")
type(snps)
phar <- read.csv("pharynx.csv", header = TRUE)
setwd(bin/QTM_100)
setwd(~/bin/QTM_100)
getwd()
setwd(/bin/QTM_100)
setwd(/Users/avoss/bin/QTM_100)
setwd(Users/avoss/bin/QTM_100)
install.packages("dplyr")
round(24.9)
11 + 9
##Anna Voss Numbers
11 + 9
insall.packages("stringi")
install.packages("stringi")
install.packages("tidyverse")
library("tidyverse")
qplot(x= c(1,2,3,4), y= c(1,2,3,4)
library("tidyverse")
library("tidyverse")
install.packages("gapminder")
library("gapminder")
gapminder
view(gapminder)
qplot(x=gapminder[year], y=gapminder[lifeExp])
qplot(x= year, y=lifeExp, data = gapminder)
## files will be output into outPath
outPath <- "splited"
dir.create(outPath)
source("http://bioconductor.org/biocLite.R")
biocLite("BSgenome.Hsapiens.UCSC.hg19")
library(BSgenome.Hsapiens.UCSC.hg19)
seqlev <- "chr1"
which <- as(seqinfo(Hsapiens)[seqlev], "GRanges")
qplot(x = diab, y = obes, data = diabobes, shape = region, color = I('blue'))
library("tidyverse")
qplot(pop, lifeExp, data = gapminder, geom = c('point', 'smooth'), facets = ~year)
library("tidyverse")
library("gapminder")
diabobes <- read.csv("obesity-diabetes.csv")
qplot(x= diab, y = obes, data = diabobes)
qplot(x = depth, y = price, data = diamonds, color = cut)
library(tidyveryse)
library(tidyverse)
library(nycflights13)
library(gapminder)
filter(flights, month %in% 1:5)
view(gapminder)
# Line plot of evolution through time of life exp for China, India, and Brazil
new_gap <- filter(gapminder, country %in% c("China", "India", "Brazil"))
qplot(year, lifeExp, data = new_gap, geom = "line")
qplot(year, lifeExp, data = new_gap, geom = "line", color = country)
mean(c(1,2,3,4,5))
NA > 1345
mean(c(1,2,3,4,5, NA))
mean(c(1,2,3,4,5,NA), na.rm = TRUE)
starwars
filter(starwars, hair_color ==NA)
filter(starwars, is.na(hair_color))
filter(starwars, hair == "black")
filter(starwars, hair_color == "black")
filter(starwars, hair_color == "none")
filter(starwars, hair_color == "none" | is.na(hair_color))
flights
mutate(flights, in_flight_gain = dep_delat - arr_delay)
mutate(flights, in_flight_gain = dep_delay - arr_delay)
mutate(flights, air_time_hrs = air_time/60)
##Distance as a proportion
mutate(flights, mean_dist = distance/mean(distance))
##gdpPercap vs. lifeExp for year 1952
new_gap <- filter(gapminder, year = 1952)
##gdpPercap vs. lifeExp for year 1952
new_gap <- filter(gapminder, year == 1952)
qplot(gspPercap, lifeExp, data = new_gap)
qplot(gdpPercap, lifeExp, data = new_gap)
new_gap <- filter(gapminder, year == 1952 & gdpPercap < 90000)
qplot(gdpPercap, lifeExp, data = new_gap)
new_new_gap <- mutate(new_gdp, log_gdp = log(gdpPercap)
new_gap <- filter(gapminder, year == 1952)
new_gap <- filter(gapminder, year == 1952)
new_new_gap <- mutate(new_gdp, log_gdp = log(gdpPercap)
new_gap <- filter(gapminder, year == 1952)
new_new_gap <- mutate(new_gdp, log_gdp = log(gdpPercap))
new_gap <- filter(gapminder, year == 1952)
new_new_gap <- mutate(new_gdp, log_gdp = log(gdpPercap))
new_gap <- filter(gapminder, year == 1952)
new_new_gap <- mutate(new_gap, log_gdp = log(gdpPercap))
qplot(gdpPercap, lifeExp, data = new_new_gap)
new_gap <- filter(gapminder, year == 1952)
new_new_gap <- mutate(new_gap, log_gdp = log(gdpPercap))
qplot(gdpPercap, lifeExp, data = new_new_gap)
qplot(log_gdp, lifeExp, data = new_new_gap)
sum(1,2,3,4)
1 %>% sum (2,3,4)
sum(1, 3) %>% mean(1)
gapminder %>% filter(year == 1952)
gapminder %>%
filter(year == 1952) %>%
mutate(log_gdp = log(gdpPercap))
qplot(log_gdp, LifeExp, data = new_gap)
gapminder %>%
filter(year == 1952) %>%
mutate(log_gdp = log(gdpPercap))
gapminder %>%
filter(year == 1952) %>%
mutate(log_gdp = log(gdpPercap))
qplot(log_gdp, LifeExp, data = new_gap)
gapminder %>%
filter(year == 1952) %>%
mutate(log_gdp = log(gdpPercap))
new_gap <- gapminder %>%
filter(year == 1952) %>%
mutate(log_gdp = log(gdpPercap))
qplot(log_gdp, LifeExp, data = new_gap)
qplot(log_gdp, lifeExp, data = new_gap)
library(tidyverse)
library(nycflights13)
library(gapminder)
select(gapminder, continent)
library(nycflights13)
##Summarize
##Setting mean function to a value creates a column title
summarize(flights, mean_dep_delay = mean(dep_delay, na.rm = TRUE))
##Further Grouping
flights %>%
group_by(month, day) %>%
summarize(mean_dep_delay = mean(dep_delay, na.rm = TRUE))
qplot(gdpPercap, lifeExp, data = gapminder)
filter(gapminder, year == 2002 & year == 2007)
filter(gapminder, year == 2002 & year == 2007) %>%
qplot(gdpPercap, lifeExp, data = gapminder)
2002and2007 <- filter(gapminder, year == 2002 & year == 2007)
2002and2007 <- filter(gapminder, year == "2002"" & year == "2007")
gapminder_filtered <- filter(gapminder, year == "2002" & year == "2007")
qplot(gdpPercap, lifeExp, data = gapminder_filtered)
##ggplot vs. qplot
qplot(x = gdpPercap, y = lifeExp, data = gapminder, facets = continent~year)
##Dots too large so...
qplot(x = gdpPercap, y = lifeExp, data = gapminder, size = I(0.5), facets = continent~year)
##Free up scales in ggplot
ggplot(data = gapminder,
mapping = aes(x = gdpPercap, y = lifeExp)) +
geom_point(size = 0.5) +
facet_grid(continent~year, scales = "free")
## Afghan. in 1952 v. lifeExp
ggplot() + geom_point(mapping = aes(x = 779, y = 28.8))
##Adding elements based on data frame
ggplot() +
geompoint(data = gapminder,
mapping = aes(x = gdpPercap, y = lifeExp))
##Adding elements based on data frame
ggplot() +
geom_point(data = gapminder,
mapping = aes(x = gdpPercap, y = lifeExp))
##Adding elements based on data frame
ggplot() +
geom_point(data = gapminder,
mapping = aes(x = gdpPercap, y = lifeExp)) +
geom_smooth(data = gapminder,
mapping = aes(x = gdpPercap, y = lifeExp))
##Common issue with ggplot: watch plus signs
ggplot(gapminder, aes(gdpPercap, lifeExp))
library(babynames)
install.packages("babynames")
library(babynames)
library(tidyverse)
library(tidyverse)
library(gapminder)
head(babynames)
babynames %>%
group_by(sex) %>%
filter(prop == max(prop, na.rm = TRUE))
summarize(babynames, males = count(sex, na.rm = TRUE))
head(babynames)
babynames %>%
group_by(sex) %>%
filter(prop == max(prop, na.rm = TRUE))
babynames %>%
group_by(year) %>%
filter(count == count(sex, na.rm = TRUE))
babynames %>%
group_by(year) %>%
filter(sex = F)
babynames %>%
group_by(year) %>%
filter(sex == M)
babynames %>%
group_by(year) %>%
filter(sex == "M")
babynames %>%
group_by(year) %>%
filter(year == 1982, sex == "M")
babynames %>%
group_by(year) %>%
filter(year == 1982, sex == "M", n == sum(n))
babynames %>%
group_by(year) %>%
filter(year == 1982, sex == "M", m == sum(n))
babynames %>%
group_by(year) %>%
filter(year == 1982, sex == "M", n == sum(n))
babynames %>%
group_by(year) %>%
filter(year == 1982, sex == "M")
babynames %>%
group_by(year) %>%
filter(year == 1982, sex == "M") %>%
summarize(n_sum == sum(n))
babynames %>%
group_by(year) %>%
filter(year == 1982, sex == "M") %>%
summarize(sum == sum(n))
babynames %>%
group_by(year) %>%
filter(year == 1982, sex == "M") %>%
summarize(n == sum(n))
babynames %>%
filter(year == 1982, sex == "M")
babynames %>%
filter(year == 1982, sex == "M") %>%
sum(n)
babynames %>%
filter(year == 1982, sex == "M") %>%
sum(n, na.rm = TRUE)
babynames %>%
filter(year == 1982, sex == "M")
babynames %>%
filter(year == 1982, sex == "M", n == sum(n))
babynames %>%
filter(year == 1982, sex == "M")
sum(babynames$n)
babynames %>%
select(year == 1982, sex == "M")
sum(babynames$n)
babynames %>%
filter(year == 1982, sex == "M")
babynames %>%
filter(year == 1982, sex == "M") %>%
sum(n)
babynames %>%
filter(year == 1982, sex == "M") %>%
count(n)
babynames %>%
filter(year == 1982, sex == "M") %>%
count(n)
babynames %>%
filter(year == 1982, sex == "M")
babynames %>%
filter(year == 1982, sex == "M") %>%
tally(n)
babynames %>%
group_by(sex)
babynames %>%
group_by(sex, year)
head(babynames)
babynames %>%
group_by(sex, year) %>%
summarize(names = tally(name))
babynames %>%
group_by(sex, year) %>%
summarize(name = tally(name))
head(babynames)
babynames %>%
filter(year == 1982, sex == "M") %>%
mutate(total = sum(n))
head(babynames)
select(babynames, year,sex,n)
select(babynames, year,sex,n) %>%
sum(n)
select(babynames, year,sex,n) %>%
group_by(year, sex) %>%
summarize(number_per_year = sum(n))
babynames %>%
filter(year = 2017) %>%
filter(prop == max(prop, na.rm = TRUE))
babynames %>%
filter(year == 2017) %>%
filter(prop == max(prop, na.rm = TRUE))
babynames %>%
filter(year == 2017, sex = "M") %>%
filter(prop == max(prop, na.rm = TRUE))
babynames %>%
filter(year == 2017, sex == "M") %>%
filter(prop == max(prop, na.rm = TRUE))
babynames %>%
filter(year == 2017, sex == "M", sex == "F") %>%
filter(prop == max(prop, na.rm = TRUE))
babynames %>%
group_by(sex) %>%
filter(year == 2017, sex == "M") %>%
filter(prop == max(prop, na.rm = TRUE))
babynames %>%
filter(year == 2017, sex == "M")
babynames %>%
filter(year == 2017, sex == "M") %>%
arrange(desc(prop))
babynames %>%
filter(year == 2017) %>%
arrange(desc(prop))
top_names_2017 = babynames %>%
filter(year == 2017) %>%
arrange(desc(prop))
top_names_2017
top_names_2017 = c("Emma", "Olivia", "Liam", "Noah")
top_names_2017
head(babynames)
babynames %>%
filter(name == top_names_2017)
head(babynames)
babynames %>%
filter(name == top_names_2017) %>%
qplot(year, prop)
babynames %>%
group_by(name) %>%
qplot(year, prop)
babynames %>%
group_by(name) %>%
qplot(year, prop, babynames)
babynames %>%
group_by(name)
babynames %>%
filter(name == top_names_2017)
qplot(year, prop, babynames)
babynames %>%
filter(name == top_names_2017) %>%
qplot(year, prop, babynames)
babynames %>%
filter(name == top_names_2017) %>%
qplot(year, n, babynames)
babynames$prop
babynames %>%
filter(name == top_names_2017) %>%
qplot(year, prop, babynames, color = name)
babynames %>%
filter(name == top_names_2017) %>%
qplot(x = year, y = prop, babynames, color = name)
names_filt <- filter(babynames, name %in% top_names_2017)
names_filt
qplot(x = year, y = prop, names_filt, geom = 'line', color = name)
library(gapminder)
gap_filt <- filter(gapminder,
country %in% c("China", "India", "Sierra Leone"))
qplot(x = year,
y = gdpPercap,
data = gap_filt,
geom = 'line',
color = country)
gap_filt
names_filt
qplot(x = year, y = prop, names_filt, geom = 'line', color = name)
ggplot(data = names_filt, mapping = aes(x = year, y = prop))
##Free up scales in ggplot
ggplot(data = gapminder,
mapping = aes(x = gdpPercap, y = lifeExp)) +
geom_point(size = 0.5) +
facet_grid(continent~year, scales = "free")
ggplot(data = names_filt, mapping = aes(x = year, y = prop) + geom_line(size = 0.5))
ggplot() + geom_line(data = names_filt, mapping = aes(x = year, y = prop)))
ggplot() + geom_line(data = names_filt, mapping = aes(x = year, y = prop))
names_filt <- filter(babynames, name %in% top_names_2017)
names_filt <- filter(babynames, name %in% top_names_2017)
ggplot() + geom_line(data = names_filt, mapping = aes(x = year, y = prop))
library(babynames)
library(tidyverse)
library(gapminder)
head(babynames)
babynames %>%
group_by(sex) %>%
filter(prop == max(prop, na.rm = TRUE))
## Mary
babynames %>%
filter(year == 1982, sex == "M") %>%
mutate(total = sum(n))
##1,814,611
select(babynames, year, sex, n) %>%
group_by(year, sex) %>%
summarize(number_per_year = sum(n))
babynames %>%
filter(year == 2017) %>%
arrange(desc(prop))
top_names_2017 = c("Emma", "Olivia", "Liam", "Noah")
names_filt <- filter(babynames, name %in% top_names_2017)
ggplot() + geom_line(data = names_filt, mapping = aes(x = year, y = prop))
ggplot() + geom_line(data = names_filt, mapping = aes(x = year, y = prop), color = name)
ggplot() + geom_line(data = names_filt, mapping = aes(x = year, y = prop), color = "name")
ggplot() + geom_line(data = names_filt, mapping = aes(x = year, y = prop, color = name))
names_filt_high <- filter(names_filt, prop > 0.0002)
ggplot() + geom_line(data = names_filt_high, mapping = aes(x = year, y = prop, color = name))
library(gapminder)
##ggplot vs. qplot
qplot(x = gdpPercap, y = lifeExp, data = gapminder, facets = continent~year)
library(tidyverse)
##ggplot vs. qplot
qplot(x = gdpPercap, y = lifeExp, data = gapminder, facets = continent~year)
library(babynames)
library(tidyverse)
library(gapminder)
head(babynames)
babynames %>%
group_by(sex) %>%
filter(prop == max(prop, na.rm = TRUE))
babynames %>%
filter(year == 1982, sex == "M") %>%
mutate(total = sum(n))
library(tidyverse)
gss_fake <- gss_cat %>% mutate(empl = sample(c("Yes", "No"),
as.double(count(gss_cat)),
replace = T
)
)
state.name
state.abb
state.keys <- tibble(state = state.name, ab = state.abb)
state.keys
midwest
ggplot(midwest, aes(PID, percbelowpoverty)) +
geom_point(group = state)
midwest
ggplot(midwest, aes(PID, percbelowpoverty)) +
geom_point(aes(color = state, shape = state))
##Quiz 3 Question
ggplot(midwest, aes(PID, percbelowpoverty)) +
geom_point(aes(group = state, color = state, shape = state))
library(nycflights13)
filter(flights, month == 1 & day == 1)
filter(flights, month == 1 & month == 2)
filter(flights, month == 1 | month == 2)
library(tidyverse)
newgss <- read.csv("newgss.csv")
txhousing_filter <- filter(txhousing, year == 2014 & city == c('Austin', 'Collin County', 'Dallas', 'Denton County', 'Fort Bend', 'Fort Worth', 'Houston', 'Montgomery County', 'San Antonio'))
txhousing_filter
txhousing
txhousing
txhousing_filter <- filter(txhousing, year == 2014 & city == c('Austin', 'Collin County', 'Dallas', 'Denton County', 'Fort Bend', 'Fort Worth', 'Houston', 'Montgomery County', 'San Antonio'))
txhousing_filter <- filter(txhousing, year == 2014 & city == c('Austin', 'Collin County', 'Dallas', 'Denton County', 'Fort Bend', 'Fort Worth', 'Houston', 'Montgomery County', 'San Antonio'))
head(txhousing_filter)
ggplot(txhousing_filter, aes(month, median)) +
geom_point(aes(color = city), size = 0.5) +
geom_line(aes(color = city), alpha = 0.5)
txhousing_filter <- filter(txhousing, year == 2014 & city == c('Austin', 'Collin County', 'Dallas', 'Denton County', 'Fort Bend', 'Fort Worth', 'Houston', 'Montgomery County', 'San Antonio'))
ggplot(txhousing_filter, aes(month, median)) +
geom_point(aes(color = city), size = 0.5) +
geom_line(aes(color = city), alpha = 0.5)
ggplot(txhousing_filter, aes(month, median)) +
geom_point(aes(color = city), size = 0.5)
txhousing_filter <- filter(txhousing, year == 2014)
txhousing_filter <- filter(txhousing, year == 2014)
txhousing_filter2 <- filter(txhousing_filter, city == c('Austin', 'Collin County', 'Dallas', 'Denton County', 'Fort Bend', 'Fort Worth', 'Houston', 'Montgomery County', 'San Antonio'))
txhousing_filter2 <- filter(txhousing_filter, city %in% c('Austin', 'Collin County', 'Dallas', 'Denton County', 'Fort Bend', 'Fort Worth', 'Houston', 'Montgomery County', 'San Antonio'))
ggplot(txhousing_filter2, aes(month, median)) +
geom_point(aes(color = city), size = 0.5) +
geom_line(aes(color = city), alpha = 0.5)
txhousing_filter2 <- filter(txhousing_filter,year == 2014 & city %in% c('Austin', 'Collin County', 'Dallas', 'Denton County', 'Fort Bend', 'Fort Worth', 'Houston', 'Montgomery County', 'San Antonio'))
ggplot(txhousing_filter2, aes(month, median)) +
geom_point(aes(color = city), size = 0.5) +
geom_line(aes(color = city), alpha = 0.5)
txhousing_filter <- filter(txhousing_filter,year == 2014 & city %in% c('Austin', 'Collin County', 'Dallas', 'Denton County', 'Fort Bend', 'Fort Worth', 'Houston', 'Montgomery County', 'San Antonio'))
ggplot(txhousing_filter, aes(month, median)) +
geom_point(aes(color = city), size = 0.5) +
geom_line(aes(color = city), alpha = 0.5)
txhousing_filter <- filter(txhousing, year == 2014 & city %in% c('Austin', 'Collin County', 'Dallas', 'Denton County', 'Fort Bend', 'Fort Worth', 'Houston', 'Montgomery County', 'San Antonio'))
ggplot(txhousing_filter, aes(month, median)) +
geom_point(aes(color = city), size = 0.5) +
geom_line(aes(color = city), alpha = 0.5)
install.packages(fastqcr)
install.packages("fastqcr")
library(fastqcr)
fastqc_install(dest.dir = "~/bin")
fastqc(fq.dir = "~/bin/sratoolkit.2.9.6-1-mac64/bin", qc.dir = NULL, threads = 4, fastqc.path = "~/bin/fastQC")
fastqc(fq.dir = "~/bin/sratoolkit.2.9.6-1-mac64/bin", qc.dir = NULL, threads = 4, fastqc.path = "~/bin/fastQC/fastqc")
fastqc(fq.dir = "~/bin/sratoolkit.2.9.6-1-mac64/bin", qc.dir = NULL, threads = 4, fastqc.path = "~/bin/fastQC/fastqc")
fastqc(fq.dir = "~/bin/sratoolkit.2.9.6-1-mac64/bin", qc.dir = NULL, threads = 4, fastqc.path = "~/bin/fastQC/fastqc")
fastqc(fq.dir = "~/bin/sratoolkit.2.9.6-1-mac64/bin", qc.dir = NULL, threads = 4, fastqc.path = "~/bin/fastQC/fastqc")
getwd()
##Problem Set 1 Due 1/29/20
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
#Use qnorm (n > 30)
z90 <- qnorm((1- 0.90)/2, lower.tail = FALSE)
n = length(y)
sample_mean <- mean(y)
sample_sd <- sd(y)
lower_90 <- sample_mean - (z90 * (sample_sd/sqrt(n)))
upper_90 <- sample_mean + (z90 * (sample_sd/sqrt(n)))
confint90 <- c(lower_90, upper_90)
confint90
n
##Data Normally distributed so can use 1 sample t-test
t.test(y, mu = length(y)-1)
##Question 2
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
##Data Normally distributed so can use 1 sample t-test
t.test(y, mu = length(y)-1)
##Data Normally distributed so can use 1 sample t-test
t.test(y, mu = 100)
setwd("~/Documents/GitHub/QTM200Spring2020/problem_sets/PS1")
##Question 3
expenditure <- read.table("expenditure.txt", header=T)
##Question 3
expenditure <- read.table("expenditure.txt", header=TRUE)
